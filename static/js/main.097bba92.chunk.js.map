{"version":3,"sources":["Pages/Login.js","config/Fire.js","Pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","emailKeyUp","e","setState","email","target","value","passwordKeyUp","password","handleSubmit","preventDefault","firebase","auth","signInWithEmailAndPassword","state","catch","error","errorCode","code","errorMessage","message","alert","react_default","a","createElement","onSubmit","type","name","onKeyUp","Component","fire","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Home","logout","bind","assertThisInitialized","signOut","onClick","App","user","authListener","_this2","onAuthStateChanged","className","Pages_Home","Pages_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NA+CeA,cA3Cb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,WAAa,SAACC,GACZR,EAAKS,SAAS,CAACC,MAAOF,EAAEG,OAAOC,SAPfZ,EAUlBa,cAAgB,SAACL,GACfR,EAAKS,SAAS,CAACK,SAAUN,EAAEG,OAAOC,SAXlBZ,EAclBe,aAAe,SAACP,GACdA,EAAEQ,iBACFC,IAASC,OAAOC,2BAA2BnB,EAAKoB,MAAMV,MAAOV,EAAKoB,MAAMN,UAAUO,MAAM,SAASC,GAC/F,IAAIC,EAAYD,EAAME,KAClBC,EAAeH,EAAMI,QACzBC,MAAMJ,EAAY,MAAQE,MAnBZzB,wEAwBhB,OACE4B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,QAAMC,SAAU5B,KAAKY,cACnBa,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,QAAQC,QAAS/B,KAAKI,cAEhDqB,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,KAAK,WAAWC,QAAS/B,KAAKU,iBAEvDe,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASpB,MAAM,oBArCjBuB,qBCOLC,EADFnB,IAASoB,cARP,CACbC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,kBCkBNC,cApBb,SAAAA,EAAY7C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IAChB5C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAtC,KAAAH,KAAMJ,KACD8C,OAAS7C,EAAK6C,OAAOC,KAAZ7C,OAAA8C,EAAA,EAAA9C,QAAA8C,EAAA,EAAA9C,CAAAD,KAFEA,wEAOhBoC,EAAKlB,OAAO8B,2CAIZ,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,UAAQmB,QAAS9C,KAAK0C,QAAtB,kBAfWV,aCkCJe,sBA9Bb,SAAAA,EAAYnD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IAChBlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KACDqB,MAAQ,CACX+B,KAAK,IAHSnD,mFAQhBG,KAAKiD,sDAGO,IAAAC,EAAAlD,KACZiC,EAAKlB,OAAOoC,mBAAmB,SAACH,GAC1BA,EACFE,EAAK5C,SAAS,CAAC0C,SAEfE,EAAK5C,SAAS,CAAC0C,KAAM,0CAMzB,OACEvB,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,OACZpD,KAAKiB,MAAM+B,KAAQvB,EAAAC,EAAAC,cAAC0B,EAAD,MAAa5B,EAAAC,EAAAC,cAAC2B,EAAD,cAzBvBtB,cCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.097bba92.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from \"firebase\";\n\nclass Login extends Component {\n  constructor(props){\n    super(props);\n\n    //this.emailKeyUp = this.emailKeyUp.bind(this);\n  }\n\n  emailKeyUp = (e) => {\n    this.setState({email: e.target.value});\n  };\n\n  passwordKeyUp = (e) => {\n    this.setState({password: e.target.value});\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).catch(function(error) {\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      alert(errorCode + \" : \" + errorMessage);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Login:</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Email:\n            <input type=\"text\" name=\"email\" onKeyUp={this.emailKeyUp} />\n          </label>\n          <label>\n            Password:\n            <input type=\"password\" name=\"password\" onKeyUp={this.passwordKeyUp} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import firebase from \"firebase\";\nconst config = {\n  apiKey: \"AIzaSyAWaDqjYK6iuFAKa50p_EvyQK_TzyEHRj0\",\n  authDomain: \"jan19-side.firebaseapp.com\",\n  databaseURL: \"https://jan19-side.firebaseio.com\",\n  projectId: \"jan19-side\",\n  storageBucket: \"jan19-side.appspot.com\",\n  messagingSenderId: \"1079823639348\"\n};\nconst fire = firebase.initializeApp(config);\nexport default fire;\n","import React, { Component } from 'react';\nimport firebase from \"firebase\";\nimport fire from '../config/Fire';\n\nclass Home extends Component {\n  constructor(props){\n    super(props);\n    this.logout = this.logout.bind(this);\n    //this.emailKeyUp = this.emailKeyUp.bind(this);\n  }\n\n  logout(){\n    fire.auth().signOut();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Home</h1>\n        <button onClick={this.logout}>Logout</button>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Login from './Pages/Login.js';\nimport Home from './Pages/Home.js';\nimport fire from './config/Fire';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      user:{},\n    }\n  }\n\n  componentDidMount(){\n    this.authListener();\n  }\n\n  authListener(){\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({user});\n      } else {\n        this.setState({user: null});\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.user ? (<Home />) : (<Login/>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}